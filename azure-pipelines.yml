# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

#variables:
#- template: test.yaml

parameters:
- name: l
  displayName: Run Tests?
  type: string
  default: null

variables:
- group: TestForCert
- name: vcontososecret
  value: $[variables.contososecret]

steps:
- checkout: self
  persistCredentials: true

- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'Microsoft Azure Internal Consumption (279f3d01-7241-445d-a4dc-dde51faf99a1)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az aks get-credentials --name rdwAKS --resource-group rdwapp-rg
      cat ~/.kube/config
      cp ~/.kube/config /home/vsts/work/1/s/test.yaml
      cat /home/vsts/work/1/s/test.yaml
      echo $(client-certificate-data)

- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      import yaml
      import json
      def main():
          with open("/home/vsts/work/1/s/test.yaml") as f:
              pubsec = yaml.safe_load(f)
          return pubsec
      read_yaml = main()
      print(read_yaml)
      a=json.dumps(read_yaml)
      print(a)
      b=json.loads(a)
      print(b)
      print("cluster234")
      temp=b["users"][0]
      print(temp)
      l=b["users"][0]["user"]["client-certificate-data"]
      print(l)
      with open('/home/vsts/work/1/s/test.txt', 'w') as t:
          t.write(l)
      def main1():
          with open("/home/vsts/work/1/s/test.txt") as t:
              pubsec = yaml.safe_load(t)
          return pubsec
      read_yaml1 = main1()
      print(read_yaml1)

